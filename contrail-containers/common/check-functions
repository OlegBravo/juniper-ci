#!/bin/bash

function check_rabbitmq_cluster() {
  local dest=( $(echo $1 | sed 's/,/ /g') )
  local err=0
  for d in ${dest[@]} ; do
    if ! $SSH_CMD $d ./check_rabbitmq.sh ; then
      echo ERROR: rabbitmq_cluster_check failed on dest=$d
      (( err+=1 ))
    fi
  done
  return $err
}

function check_introspection() {
  local dest=( $(echo $1 | sed 's/,/ /g') )
  local err=0
  local count=0
  local ssl_opts=''
  if [[ -n "$SSL_ENABLE" ]] ; then
    ssl_opts="SSL_ENABLE=$SSL_ENABLE"
  fi
  for d in ${dest[@]} ; do
    if ! $SSH_CMD $d $ssl_opts ./check_introspection.sh ; then
      echo "ERROR: check_introspection failed on dest=$d"
      err=1
    fi
  done
  return $err
}

image_name=cirros
function create_image() {
  if ! output=`openstack image show $image_name 2>/dev/null` ; then
    rm -f cirros-0.3.4-x86_64-disk.img
    wget -t 2 -T 60 -q http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img
    openstack image create --public --file cirros-0.3.4-x86_64-disk.img $image_name
  fi
}

function check_simple_instance() {
  create_image

  if ! openstack flavor show m1.ms &>/dev/null ; then
    openstack flavor create --disk 1 --vcpus 1 --ram 128 m1.ms >/dev/null
  fi
  if [[ "$USE_DPDK" == "true" ]]; then
    openstack flavor set --property hw:mem_page_size=any m1.ms
  fi

  openstack keypair delete my_ms_key 2>/dev/null || /bin/true
  openstack keypair create --public-key $HOME/.ssh/id_rsa.pub my_ms_key

  if ! openstack network show demo-net 2>/dev/null ; then
    openstack network create demo-net
  fi
  if ! openstack subnet list --network demo-net | grep -q demo-subnet ; then
    openstack subnet create --network demo-net --subnet-range 192.168.1.0/24 demo-subnet
  fi

  local net_id=`openstack network show demo-net -f value -c id`
  openstack server create --image cirros --flavor m1.ms --key-name my_ms_key --nic net-id=$net_id demo1
  sleep 20
  openstack server show demo1
  local iip=`openstack server show demo1 | awk '/addresses/{print $4}' | cut -d '=' -f 2`
  local hhost=`openstack server show demo1 | awk '/OS-EXT-SRV-ATTR:hypervisor_hostname/{print $4}'`
  local hip=`openstack hypervisor list -c "Hypervisor Hostname" -c "Host IP" | grep "$hhost" | awk '{print $4}'`
  if [[ "$hip" == 'None' ]]; then
    # helm case
    hip=`getent hosts $hhost | awk '{print $1}'`
  fi
  local lip=`hostname -i`
  local ssh_cmd=''
  if [[ "$hip" != "$lip" ]]; then
    ssh_cmd="ssh ${SSH_USER:-root}@$hip"
  fi

  local if_name=`$ssh_cmd sudo vif --list 2>/dev/null| grep -B 1 $iip | awk '/^vif/{print $NF}'`
  if [[ -z "$if_name" ]]; then
    # helm doesn't have vif on host yet
    agent_cid=`$ssh_cmd sudo docker ps 2>/dev/null | grep "/contrail-vrouter-agent@" | awk '{print $1}'`
    if_name=`$ssh_cmd sudo docker exec -i $agent_cid vif --list 2>/dev/null | grep -B 1 $iip | awk '/^vif/{print $NF}'`
    if [[ -z "$if_name" ]]; then
      echo "ERROR: tap interface for VM couldn't be found"
      $ssh_cmd ip link
      $ssh_cmd vif --list
      return 1
    fi
  fi

  local curl_proto='http'
  local curl_ssl_opts=''
  if [[ -n "$SSL_ENABLE" ]] ; then
    local key=${SERVER_KEYFILE:-'/etc/contrail/ssl/private/server-privkey.pem'}
    local cert=${SERVER_CERTFILE:-'/etc/contrail/ssl/certs/server.pem'}
    local ca_cert=${SERVER_CA_CERTFILE:-'/etc/contrail/ssl/certs/ca-cert.pem'}
    curl_ssl_opts="--key $key --cert $cert"
    curl_proto='https'
  fi

  curl_ip=$($ssh_cmd hostname -i)
  local ip=`$ssh_cmd curl $curl_ssl_opts -s ${curl_proto}://${curl_ip}:8085/Snh_ItfReq?name=$if_name 2>/dev/null | sed 's/^.*<mdata_ip_addr.*>\([0-9\.]*\)<.mdata_ip_addr>.*$/\1/'`
  if [[ -z "$ip" ]]; then
    echo "ERROR: there is no link-local IP for VM"
    $ssh_cmd curl $curl_ssl_opts -s ${curl_proto}://${curl_ip}:8085/Snh_ItfReq?name=$if_name | xmllint --format -
    $ssh_cmd ip route
    return 1
  fi
  $ssh_cmd ping -c 3 $ip

  local ssh_opts="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=5 -i ${HOME}/.ssh/id_rsa"
  echo "INFO: Wait for instance's ssh is ready"
  local fail=0
  while ! $ssh_cmd ssh $ssh_opts cirros@$ip whoami 2>/dev/null; do
    ((++fail))
    if ((fail > 12)); then
      echo "ERROR: Instance status wait timeout occured"
      return 1
    fi
    sleep 10
    echo "attempt $fail of 12"
  done

  # test for outside world
  $ssh_cmd ssh $ssh_opts cirros@$ip ping -q -c 1 -W 2 8.8.8.8 2>/dev/null || /bin/true
  # Check the VM can reach the metadata server
  local curl_proto='http'
  local curl_ssl_opts=''
  if [[ "${METADATA_SSL_ENABLE,,}" == 'true' ]] ; then
    curl_proto='https'
    curl_ssl_opts='-k'
  fi
  $ssh_cmd ssh $ssh_opts cirros@$ip curl $curl_ssl_opts -s --connect-timeout 5 ${curl_proto}://169.254.169.254/latest/meta-data/local-ipv4 2>/dev/null ; echo ''
}
