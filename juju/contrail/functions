#!/bin/bash -e

function check_containers() {
  if [ ! -d "$HOME/docker" ] ; then
    echo "ERROR: Please provide container images for deployment in $HOME/docker/ for build $BUILD"
    exit 1
  fi
  packages="contrail-install-packages_4.0.0.0-$BUILD~$VERSION_all.deb"
  image_controller="contrail-controller-u14.04-4.0.0.0-$BUILD.tar.gz"
  image_analytics="contrail-analytics-u14.04-4.0.0.0-$BUILD.tar.gz"
  image_analyticsdb="contrail-analyticsdb-u14.04-4.0.0.0-$BUILD.tar.gz"
  image_agent="contrail-agent-u14.04-4.0.0.0-$BUILD.tar.gz"
  for ff in "$packages" "$image_controller"  "$image_analytics" "$image_analyticsdb" ; do
    if [ ! -f "$HOME/docker/$ff" ] ; then
      echo "ERROR: There is no file $ff which is needed for deployment."
      exit 1
    fi
  done
  if [[ $VROUTER_AS_CONTAINER != '0' && ! -f "$HOME/docker/$image_agent" ]] ; then
     echo "ERROR: There is no file $HOME/docker/$image_agent which is needed for deployment."
    exit 1
  fi
}

function prepare_machines() {
  m1=$(create_machine 0)
  echo "INFO: Machine created: $m1"
  m2=$(create_machine 1)
  echo "INFO: Machine created: $m2"
  m3=$(create_machine 1)
  echo "INFO: Machine created: $m3"
  m4=$(create_machine 0)
  echo "INFO: Machine created: $m4"
  m5=$(create_machine 0)
  echo "INFO: Machine created: $m5"
  m6=$(create_machine 2)
  echo "INFO: Machine created: $m6"
  if [ "$DEPLOY_AS_HA_MODE" != 'false' ] ; then
    m7=$(create_machine 2)
    echo "INFO: Machine created: $m7"
    m8=$(create_machine 2)
    echo "INFO: Machine created: $m8"
    wait_for_machines $m1 $m2 $m3 $m4 $m5 $m6 $m7 $m8
  else
    wait_for_machines $m1 $m2 $m3 $m4 $m5 $m6
  fi

  function add_packages() {
    mch=$1
    juju-scp "$HOME/docker/$packages" "$mch:$packages"
    juju-ssh $mch "sudo dpkg -i $packages"
    juju-ssh $mch "sudo /opt/contrail/contrail_packages/setup.sh"
  }
  # add packages only to machine with neutron-api and nova-compute if needed
  add_packages $m5
  if [[ $VROUTER_AS_CONTAINER == '0' ]] ; then
    add_packages $m2
    add_packages $m3
  fi

  juju-status-tabular
}

function hack_openstack() {
  if [[ "$jver" == 2 ]] ; then
    # Juju 2.0 registers services with private ips (using new modern tool 'network-get public')
    echo "INFO: HACK: Reconfigure public endpoints for OpenStack $(date)"
    ip=`get-machine-ip-by-number $m4`
    juju-set nova-cloud-controller os-public-hostname=$ip
    ip=`get-machine-ip-by-number $m5`
    juju-set neutron-api os-public-hostname=$ip
    ip=`get-machine-ip-by-number $m2`
    juju-set glance os-public-hostname=$ip
    ip=`get-machine-ip-by-number $m3`
    juju-set keystone os-public-hostname=$ip
    echo "INFO: Wait for services start: $(date)"
    wait_absence_status_for_services "executing|blocked|waiting|allocating" 10
    echo "INFO: Wait for services end: $(date)"
  fi

  # open port for vnc console
  open_port $m4 6080
}

function post_deploy() {
  sleep 30
  echo "INFO: Wait for services start: $(date)"
  wait_absence_status_for_services "executing|blocked|waiting"
  echo "INFO: Wait for services end: $(date)"

  # check for errors
  if juju-status | grep "current" | grep error ; then
    echo "ERROR: Some services went to error state"
    juju-ssh 0 sudo grep Error /var/log/juju/all-machines.log 2>/dev/null
    exit 1
  fi

  hack_openspack
  juju-status-tabular

  # check for errors
  if juju-status | grep "current" | grep error ; then
    echo "ERROR: Some services went to error state"
    juju-ssh 0 sudo grep Error /var/log/juju/all-machines.log 2>/dev/null
    exit 1
  fi
}
