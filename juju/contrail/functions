#!/bin/bash -e

function check_containers() {
  if [ ! -d "$HOME/docker" ] ; then
    echo "ERROR: Please provide container images for deployment in $HOME/docker/ for build $BUILD"
    exit 1
  fi
  packages="contrail_debs-${BUILD}-${VERSION}.tgz"
  image_controller="contrail-controller-ubuntu14.04-4.0.0.0-${BUILD}.tar.gz"
  image_analytics="contrail-analytics-ubuntu14.04-4.0.0.0-${BUILD}.tar.gz"
  image_analyticsdb="contrail-analyticsdb-ubuntu14.04-4.0.0.0-${BUILD}.tar.gz"
  for ff in "$packages" "$image_controller"  "$image_analytics" "$image_analyticsdb" ; do
    if [ ! -f "$HOME/docker/$ff" ] ; then
      echo "ERROR: There is no file $ff which is needed for deployment."
      exit 1
    fi
  done
}

function prepare_repo() {
  echo "INFO: Prepare apt-repo"
  m0=$(create_machine 0)
  echo "INFO: Machine created: $m0"
  wait_for_machines $m0
  juju-deploy cs:$SERIES/ubuntu --to $m0
  juju-scp "$HOME/docker/$packages" "$m0:contrail_debs.tgz"
  juju-scp "$my_dir/create-aptrepo.sh" $m0:create-aptrepo.sh
  open_port $m0 80
  juju-ssh $m0 ./create-aptrepo.sh
  echo "INFO: apt-repo is ready"
}

function get_machine_index_by_service() {
  local srv=$1
  juju-status-tabular $srv | awk "/^$srv\//{print \$4}"
}

function detect_machines() {
  m1=`get_machine_index_by_service openstack-dashboard`
  m2=`get_machine_index_by_service glance`
  m3=`get_machine_index_by_service keystone`
  m4=`get_machine_index_by_service nova-cloud-controller`
  m5=`get_machine_index_by_service neutron-api`
  m6=`get_machine_index_by_service contrail-controller`
}

function hack_openstack() {
  if [[ "$jver" == 2 ]] ; then
    # Juju 2.0 registers services with private ips (using new modern tool 'network-get public')
    echo "INFO: HACK: Reconfigure public endpoints for OpenStack $(date)"
    ip=`get-machine-ip-by-number $m4`
    juju-set nova-cloud-controller os-public-hostname=$ip
    ip=`get-machine-ip-by-number $m5`
    juju-set neutron-api os-public-hostname=$ip
    ip=`get-machine-ip-by-number $m2`
    juju-set glance os-public-hostname=$ip
    ip=`get-machine-ip-by-number $m3`
    juju-set keystone os-public-hostname=$ip
    echo "INFO: Wait for services start: $(date)"
    wait_absence_status_for_services "executing|blocked|waiting|allocating" 10
    echo "INFO: Wait for services end: $(date)"
  fi

  # open port for vnc console
  open_port $m4 6080
}

function post_deploy() {
  sleep 30
  echo "INFO: Wait for services start: $(date)"
  wait_absence_status_for_services "executing|blocked|waiting" 39
  echo "INFO: Wait for services end: $(date)"

  if [[ -z "$m1" || -z "$m2" || -z "$m3" || -z "$m4" || -z "$m5" || -z "$m6" ]] ; then
    detect_machines
  fi

  # check for errors
  if juju-status | grep "current" | grep error ; then
    echo "ERROR: Some services went to error state"
    juju-ssh 0 sudo grep Error /var/log/juju/all-machines.log 2>/dev/null
    exit 1
  fi

  hack_openstack
  juju-status-tabular

  # check for errors
  if juju-status | grep "current" | grep error ; then
    echo "ERROR: Some services went to error state"
    juju-ssh 0 sudo grep Error /var/log/juju/all-machines.log 2>/dev/null
    exit 1
  fi
}

function apply_ssl() {
  if [[ "$USE_SSL" != "true" ]] ; then
    return
  fi

  tmp_cfg="/tmp/ssl_config.yaml"
  for charm in keystone neutron-api glance nova-cloud-controller openstack-dashboard ; do
    echo "${charm}:" > "$tmp_cfg"
    cat $my_dir/ssl_openstack_config.yaml >> "$tmp_cfg"
    juju-set $charm --file "$tmp_cfg"
  done

  juju-set contrail-controller --file "$my_dir/ssl_contrail_config.yaml"

  juju-set keystone "use-https=true"
}
