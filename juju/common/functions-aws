#!/bin/bash -e

function detect_machines() {
  m1=`get_machines_index_by_service openstack-dashboard`
  m2=`get_machines_index_by_service glance`
  m3=`get_machines_index_by_service keystone`
  m4=`get_machines_index_by_service nova-cloud-controller`
  m5=`get_machines_index_by_service neutron-api`
  m6=`get_machines_index_by_service contrail-controller`
}

function cleanup_computes() {
  # purge this ugly package. it breaks contrail vrouter deployment
  echo "INFO: Purge ubuntu-fan package"
  while ! juju-ssh $m2 "sudo apt-get purge -fy --auto-remove ubuntu-fan" 2>/dev/null ; do sleep 1 ; done
  while ! juju-ssh $m3 "sudo apt-get purge -fy --auto-remove ubuntu-fan" 2>/dev/null ; do sleep 1 ; done
}

function open_port() {
  local mch=$1
  local port=$2
  local protocol=${3:-tcp}

  for i in {0..30} ; do
    local iid=`get-machine-id-by-number $mch`
    if [[ "$iid" == i-* ]] ; then
      break
    fi
    sleep 5
  done

  local sg_id=`aws ec2 describe-instances --instance-id "$iid" --query 'Reservations[*].Instances[*].SecurityGroups' | grep -C 2 "\-$mch\"" | awk '/GroupId/{print $2}' | head -1 | xargs`
  if echo $sg_id | grep ',' ; then
    sg_id=`echo $sg_id | sed 's/\,//g'`
  fi
  aws ec2 authorize-security-group-ingress --group-id $sg_id --protocol $protocol --port $port --cidr 0.0.0.0/0
  aws ec2 describe-security-groups --group-id $sg_id
}

function hack_openstack() {
  if [[ "$jver" == 2 ]] ; then
    # Juju 2.0 registers services with private ips (using new modern tool 'network-get public')
    echo "INFO: HACK: Reconfigure public endpoints for OpenStack $(date)"

    local mchs=("$m2" "$m3" "$m4" "$m5")
    local mch_srvs=('glance' 'keystone' 'nova-cloud-controller' 'neutron-api')
    local mch_sets=('0' '0' '0' '0')
    for j in {1..30} ; do
      echo "INFO: attempt $j"
      for i in {0..3} ; do
        if [[ ${mch_sets[$i]} != '0' ]] ; then
          continue;
        fi
        local addr_count=`juju machines $juju_model_arg --format json | python -c "import sys; import json; sys.stdout.write(str(len(json.load(sys.stdin)['machines'].get('${mchs[$i]}', {}).get('ip-addresses', []))))"`
        if [[ $addr_count != '0' ]] ; then
          local ip=`get-machine-ip-by-number ${mchs[$i]}`
          echo "INFO: Update hostnames of ${mch_srvs[$i]} with IP=$ip"
          juju-set ${mch_srvs[$i]} os-public-hostname=$ip os-admin-hostname=$ip os-internal-hostname=$ip
          mch_sets[$i]='1'
        fi
      done
      if ! echo ${mch_sets[@]} | grep -q '0' ; then
        break
      fi
      sleep 2
    done
  fi

  # open admin port of keystone - to be able to create projects
  open_port $m3 35357
  # open port for vnc console
  open_port $m4 6080
}

function detect_subnet() {
  local ids=(`aws ec2 describe-subnets --filters Name=availability-zone,Values=$AZ Name=vpc-id,Values=$vpc_id Name=defaultForAz,Values=false --query 'Subnets[*].SubnetId' --output text`)
  if [[ ${#ids[@]} == 0 ]] ; then
    # TODO: add CIDR detection from VPC. add CIDR choosing if it present in another AZ.
    aws ec2 create-subnet --vpc-id $vpc_id --cidr-block 172.31.100.0/24 --availability-zone $AZ
    local ids=(`aws ec2 describe-subnets --filters Name=availability-zone,Values=$AZ Name=vpc-id,Values=$vpc_id Name=defaultForAz,Values=false --query 'Subnets[*].SubnetId' --output text`)
    subnet_id=${ids[0]}
  else
    subnet_id=${ids[0]}
  fi
  subnet_cidr=`aws ec2 describe-subnets --subnet-id $subnet_id --query 'Subnets[0].CidrBlock' --output text`
  echo "INFO: additional subnet_id is $subnet_id and CIDR is $subnet_cidr"
}

function add_interface() {
  local mch=$1
  echo "INFO: attaching additional interface to machine $mch"

  if [[ -z "$subnet_id" ]] ; then
    echo "ERROR: additional subnet is not defined"
    return 1
  fi

  iid=`get-machine-id-by-number $mch`
  if [[ -z "$iid" ]] ; then
    echo "ERROR: Can't get instance_id for machine $mch"
    return 1
  fi

  eni_id=`aws ec2 create-network-interface --subnet-id $subnet_id --query 'NetworkInterface.NetworkInterfaceId' --output text`
  eni_attach_id=`aws ec2 attach-network-interface --network-interface-id $eni_id --instance-id $iid --device-index 1 --query 'AttachmentId' --output text`
  aws ec2 modify-network-interface-attribute --network-interface-id $eni_id --attachment AttachmentId=$eni_attach_id,DeleteOnTermination=true
  sleep 5
  echo "INFO: additional interface $eni_id is attached to instance $mch:$iid - $eni_attach_id"

  for i in {1..4} ; do
    nif=`juju-ssh $mch "sudo lshw" 2>/dev/null | grep -A 10 'network.*DISABLED' | awk '/logical name/{print $3}' | head -1 | tr -d '\r'`
    if [ -n "$nif" ] ; then
      break
    fi
    sleep 5
  done
  echo "INFO: interface $nif detected"
  juju-ssh $mch "sudo bash -c 'echo \"auto $nif\" > /etc/network/interfaces.d/$nif.cfg && echo \"iface $nif inet dhcp\" >> /etc/network/interfaces.d/$nif.cfg && ifup $nif &>ifup.out'" 2>/dev/null
  echo "INFO: interface $nif added"
  sleep 5
  juju-ssh $mch ifconfig 2>/dev/null | grep -A 1 "^[a-z].*" | grep -v "\-\-"
}

function prepare_repo() {
  echo "INFO: Prepare apt-repo"
  mrepo=$(create_machine mem=4G cores=1 root-disk=40G)
  echo "INFO: Machine created: $mrepo"
  if ! wait_for_machines $mrepo ; then
    return 1
  fi
  juju-deploy cs:$SERIES/ubuntu --to $mrepo
  juju-scp "$HOME/docker/$packages" "$mrepo:contrail_debs.tgz"
  juju-scp "$my_dir/../common/create-aptrepo.sh" $mrepo:create-aptrepo.sh
  open_port $mrepo 80
  juju-ssh $mrepo ./create-aptrepo.sh $SERIES
  echo "INFO: apt-repo is ready"
}
