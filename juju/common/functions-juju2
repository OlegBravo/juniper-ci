#!/bin/bash

fjmy_file="${BASH_SOURCE[0]}"
fjmy_dir="$(dirname $fjmy_file)"
source $fjmy_dir/functions-juju

function juju-version() {
  echo '2'
}

function juju-bootstrap() {
  if ! juju bootstrap --bootstrap-series=$SERIES aws amazon ; then
    return 1
  fi
  juju-status
}

function juju-destroy-environment() {
  juju destroy-controller -y --destroy-all-models amazon
}

function juju-deploy-bundle() {
  juju-deploy "$@"
}

function juju-set() {
  juju config $juju_model_arg "$@"
}

function juju-remove-service() {
  juju remove-application $juju_model_arg "$@"
}

function juju-get() {
  juju config --format json $juju_model_arg $1 | python -c "import sys, json; data = json.load(sys.stdin); s = data['settings']['$2'] ; print s.get('value', s.get('default', ''))"
}

function get_machine() {
  local service=$1
  juju status $juju_model_arg $service --format tabular | grep "$service/" | head -1 | awk '{print $4}'
}

function get_machine_ip() {
  local service=$1
  juju status $juju_model_arg $service --format tabular | grep "$service/" | head -1 | awk '{print $5}'
}

function get_machine_by_ip() {
  local ip=$1
  juju status $ip | grep -A 1 "^Machine" | tail -1 | awk '{print $1}'
  # next doesn't work if ip is private
  #juju machines $juju_model_arg | grep $ip | awk '{print $1}'
}

function juju-get-machines() {
  juju machines $juju_model_arg | awk '/started/{print $1}'
}

function get-machine-ip-by-number() {
  local path=""
  if echo "$1" | grep -q '/lxd/' ; then
    # lxd container case
    local mch=`echo "$1" | cut -d '/' -f 1`
    local path=".get('$mch', {}).get('containers', {})"
  fi
  if output=`juju machines $juju_model_arg --format json | python -c "import sys; import json; sys.stdout.write(json.load(sys.stdin)['machines']${path}.get('$1', {}).get('dns-name'))" 2>&1` ; then
    echo $output
  fi
}

function get-machine-id-by-number() {
  local path=""
  if echo "$1" | grep -q '/lxd/' ; then
    # lxd container case
    local mch=`echo "$1" | cut -d '/' -f 1`
    local path=".get('$mch', {}).get('containers', {})"
  fi
  if output=`juju machines $juju_model_arg --format json | python -c "import sys; import json; sys.stdout.write(json.load(sys.stdin)['machines']${path}.get('$1', {}).get('instance-id'))" 2>&1` ; then
    echo $output
  fi
}

function juju-attach() {
  juju attach $juju_model_arg "$@"
}
