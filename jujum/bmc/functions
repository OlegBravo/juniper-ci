#!/bin/bash

# definitions for KVM/virsh:

export LIBVIRT_DEFAULT_URI=qemu:///system
virsh_cmd="virsh"

# set this name manually to mac's definition below
job_prefix="jovs"

juju_controller_name="${job_prefix}-cloud"
poolname="${job_prefix}images"
net_driver=${net_driver:-e1000}
nname="$job_prefix"
addr="10.0.0"
nname_ext="${job_prefix}_ext"
addr_ext="10.20.0"

mac_base='52:54:00:10:00'
mac_base_ext='52:54:00:11:00'
# juju controller
cont_idx='99'
# openstack components (controllers + rabbit + db)
os_cont_0_idx='10'
# network nodes
os_net_1_idx='20'
os_net_2_idx='21'
os_net_3_idx='22'
# openstack compute
os_comp_1_idx='30'
os_comp_2_idx='31'

# openstack definitions
public_network_addr="10.10.0"
# Neutron
brex_iface='br-ex'
brex_port='dummy0'

# KVM helpers

function delete_network() {
  local network_name="$1"
  $virsh_cmd net-destroy $network_name 2> /dev/null || true
  $virsh_cmd net-undefine $network_name 2> /dev/null || true
}

function create_network() {
  local network_name="$1"
  local addr="$2"

  delete_network $network_name

  echo "<network><name>$network_name</name><forward mode=\"nat\"><nat><port start=\"1024\" end=\"65535\"/></nat></forward><ip address=\"$addr.1\" netmask=\"255.255.255.0\"><dhcp><range start=\"$addr.10\" end=\"$addr.200\"/></dhcp></ip></network>" > /tmp/juju-net.xml
  $virsh_cmd net-define /tmp/juju-net.xml
  rm /tmp/juju-net.xml
  $virsh_cmd net-autostart $network_name
  $virsh_cmd -c qemu:///system net-start $network_name
}

function create_pool() {
  local poolname="$1"
  local path="$HOME/libvirt/$poolname"
  $virsh_cmd pool-define-as $poolname dir - - - - "$path"
  $virsh_cmd pool-build $poolname
  $virsh_cmd pool-start $poolname
  $virsh_cmd pool-autostart $poolname
}

function delete_pool() {
  local poolname="$1"
  local path=`get_pool_path $poolname`
  $virsh_cmd pool-destroy $poolname
  $virsh_cmd pool-undefine $poolname
  rm -rf "$poolpath" || /bin/true
}

function get_pool_path() {
  local poolname=$1
  $virsh_cmd pool-info $poolname &>/dev/null || return
  $virsh_cmd pool-dumpxml $poolname | sed -n '/path/{s/.*<path>\(.*\)<\/path>.*/\1/;p}'
}

function delete_domains() {
  for name in `$virsh_cmd list --all | grep "${job_prefix}-" | awk '{print $2}'` ; do
    $virsh_cmd destroy $name || /bin/true
    sleep 2
    $virsh_cmd undefine $name || /bin/true
  done
}

function delete_volume() {
  volname=$1
  poolname=$2
  pool_path=$(get_pool_path $poolname)
  $virsh_cmd vol-delete $volname --pool $poolname 2>/dev/null || rm -f $pool_path/$volname 2>/dev/null
}

# juju helpers

function post_deploy() {
  echo "INFO: Waiting for services start: $(date)"

  if ! wait_absence_status_for_services "executing|blocked|waiting" 45 ; then
    echo "ERROR: Waiting for services end: $(date)"
    return 1
  fi
  echo "INFO: Waiting for services end: $(date)"

  # check for errors
  if juju-status | grep "current" | grep error ; then
    echo "ERROR: Some services went to error state"
    juju-ssh 0 sudo grep Error /var/log/juju/all-machines.log 2>/dev/null
    return 1
  fi

  juju-status-tabular
}

function configure_l3_routing() {
  # configures compute/network node for 'disconnected' DVR/HA scheme
  local mch=$1

  # enable forwarding
  juju ssh $mch "sudo sysctl -w net.ipv4.ip_forward=1"
  # assign gateway of public network to br-ex (OVSBridge)
  juju ssh $mch "sudo ip link set up dev $brex_iface ; sudo ip addr add $public_network_addr.1/32 broadcast $public_network_addr.1 dev $brex_iface"
  # add route for public CIDR to virtual zone
  juju ssh $mch "sudo ip route add $public_network_addr.0/24 dev $brex_iface"
  # add route for all traffic from virtual zone to host's default gateway
  juju ssh $mch "sudo ip rule add from all iif $brex_iface pref 10 table 120 ; sudo ip route add 0.0.0.0/0 table 120 via $addr.1 dev $IF1"

  # copy & install neutron_router_helper
  juju scp $HOME/neutron-router-helper.tgz $mch:
  juju ssh $mch "tar -xf neutron-router-helper.tgz ; cd neutron-router-helper-master ; sudo PBR_VERSION='0.1.0' python setup.py install --install-scripts=/usr/local/bin &>/dev/null"
  juju ssh $mch "sudo systemctl daemon-reload ; sudo systemct start neutron-router-helper.timer ; sudo systemctl restart rsyslog"
}

function _install_dr() {
  juju scp $HOME/neutron-dynamic-routing.tgz $mch:
  juju ssh $mch "tar -xf neutron-dynamic-routing.tgz ; cd neutron-dynamic-routing ; git checkout 30a9f0b ; sudo python setup.py install --install-scripts=/usr/bin --install-data=/ &>/dev/null"
}

function _run_dr_agent() {
  local mch=$1
  local ip=$2

  local ftmp=$(mktemp)
  cat <<EOS >$ftmp
[DEFAULT]
verbose=True
debug=False
[BGP]
bgp_speaker_driver = neutron_dynamic_routing.services.bgp.agent.driver.ryu.driver.RyuBgpDriver
bgp_router_id = $ip
EOS
  juju scp $ftmp $mch:bgp_dragent.ini
  juju scp $my_dir/files/neutron-bgp-dragent.service $mch:neutron-bgp-dragent.service
  juju ssh $mch "sudo cp ./neutron-bgp-dragent.service /usr/lib/systemd/system/neutron-bgp-dragent.service"
  juju ssh $mch "sudo cp ./bgp_dragent.ini /etc/neutron/bgp_dragent.ini ; sudo chmod 644 /etc/neutron/bgp_dragent.ini ; sudo systemctl start neutron-bgp-dragent.service"
}

function configure_bgp_neutron_api() {
  local mch="neutron-api/0"
  _install_dr $mch

  # run dr agent
  local ip=`juju ssh $mch "hostname -i" 2>/dev/null`
  _run_dr_agent $mch $ip

  # configure dr plugin
  local path='/usr/local/lib/python2.7/dist-packages/neutron_dynamic_routing/db/migration/alembic_migrations/versions/'
  juju ssh $mch "sudo mv $path/pike/expand/* $path/newton/expand/"
  juju ssh $mch "sudo neutron-db-manage upgrade heads"
  juju config neutron-api "manage-neutron-plugin-legacy-mode=False"
}

function configure_bgp_agent() {
  local mch=$1
  local ip=$2
  _install_dr $mch
  _run_dr_agent $mch $ip
}
