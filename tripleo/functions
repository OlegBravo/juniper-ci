#!/bin/bash

function get_network_name() {
  local type=$1
  case "$type" in
    management)
      echo "rd-mgmt-$NUM"
      ;;
    provisioning)
      echo "rd-prov-$NUM"
      ;;
    dpdk)
      echo "rd-dpdk-$NUM"
      ;;
    external)
      echo "rd-ext-$NUM"
      ;;
    *)
      return 1
  esac
}

function get_network_ip() {
  local type=$1
  case "$type" in
    management)
      ((addr=172+NUM*10))
      ;;
    provisioning)
      ((addr=176+NUM*10))
      ;;
    dpdk)
      ((addr=178+NUM*10))
      ;;
    external)
      ((addr=175+NUM*10))
      ;;
    *)
      return 1
  esac
  echo "192.168.$addr"
}

function build_network_xml() {
  local type="$1"
  local nname="$2"
  local fname=`mktemp`
  local addr=$(get_network_ip $type)
  case "$type" in
    management)
      echo "<network><name>$nname</name><bridge name=\"$nname\" /><forward mode=\"nat\"/><ip address=\"$addr.1\" netmask=\"255.255.255.0\"/></network>" > $fname
      ;;
    provisioning)
      echo "<network><name>$nname</name><bridge name=\"$nname\" /><ip address=\"$addr.1\" netmask=\"255.255.255.0\"/></network>" > $fname
      ;;
    dpdk)
      echo "<network><name>$nname</name><bridge name=\"$nname\" /><ip address=\"$addr.1\" netmask=\"255.255.255.0\"/></network>" > $fname
      ;;
    external)
      echo "<network><name>$nname</name><forward mode=\"nat\"><nat><port start=\"1024\" end=\"65535\"/></nat></forward><ip address=\"$addr.1\" netmask=\"255.255.255.0\"><dhcp><range start=\"$addr.2\" end=\"$addr.254\"/></dhcp></ip></network>" > $fname
      ;;
    *)
      return 1
  esac
  echo $fname
}

function delete_network() {
  local type="$1"
  local network_name=`get_network_name $type`
  virsh net-destroy $network_name 2> /dev/null || true
  virsh net-undefine $network_name 2> /dev/null || true
}

function create_network() {
  local type="$1"

  delete_network $type

  local network_name=`get_network_name $type`
  local fxml=`build_network_xml $type $network_name`
  virsh net-define $fxml
  rm $fxml
  virsh net-autostart $network_name
  virsh net-start $network_name
}

function create_pool() {
  local poolname="$1"
  local path="/var/lib/libvirt/$poolname"
  virsh pool-define-as $poolname dir - - - - "$path"
  virsh pool-build $poolname
  virsh pool-start $poolname
  virsh pool-autostart $poolname
}

function get_pool_path() {
  local poolname=$1
  virsh pool-info $poolname &>/dev/null || return
  virsh pool-dumpxml $poolname | sed -n '/path/{s/.*<path>\(.*\)<\/path>.*/\1/;p}'
}

function _delete_domain() {
  local name=$1
  if virsh dominfo $name 2>/dev/null ; then
    virsh destroy $name || true
    sleep 2
    virsh undefine $name || true
  fi
}

function delete_domains() {
  for name in `virsh list --all | grep "rd-overcloud-$NUM-" | awk '{print $2}'` ; do
    _delete_domain $name
  done

  _delete_domain rd-undercloud-$NUM
  _delete_domain rd-undercloud-$NUM-cert-test
}

function delete_volume() {
  local volname=$1
  local poolname=$2
  local pool_path=$(get_pool_path $poolname)
  virsh vol-delete $volname --pool $poolname 2>/dev/null || rm -f $pool_path/$volname 2>/dev/null
}

function rhel_get_repos_for_os() {
  local common_repos="rhel-7-server-rpms rhel-7-server-extras-rpms rhel-7-server-rh-common-rpms rhel-ha-for-rhel-7-server-rpms"
  if [[ "$RHEL_CERT_TEST" == 'true' ]] ; then
    common_repos+=" rhel-7-server-cert-rpms"
  fi
  local enable_repo=''
  case "$OPENSTACK_VERSION" in
    newton)
      enable_repo='10'
      ;;
    ocata)
      enable_repo='11'
      ;;
    pike)
      enable_repo='12'
      ;;
    *)
      echo "ERROR: unsupported OS $OPENSTACK_VERSION"
      exit 1
  esac
  common_repos+=" rhel-7-server-openstack-${enable_repo}-rpms"
  common_repos+=" rhel-7-server-openstack-${enable_repo}-devtools-rpms"
  echo $common_repos
}

function _rhel_register() {
  local image_file=$1
  local ret=1
  local i=0
  while (( i < 5 )) ; do
    echo "Image registration try=$i"
    virt-customize -a $image_file \
      --sm-credentials ${RHEL_USER}:password:${RHEL_PASSWORD} --sm-register && ret=0
    if (( ret == 0 )) ; then
      break
    fi
    (( i+=1 ))
  done
  echo "Image registration result for $i tries: $ret"
  return $ret
}

function _rhel_attach() {
  local image_file=$1
  local attach_type='auto'
  if [[ -n "$RHEL_POOL_ID" ]] ; then
    attach_type="pool:${RHEL_POOL_ID}"
  fi
  local ret=1
  local i=0
  while (( i < 5 )) ; do
    echo "Subscription attach try=$i"
    virt-customize -a $image_file --sm-attach ${attach_type} && ret=0
    if (( ret == 0 )) ; then
      break
    fi
    (( i+=1 ))
  done
  echo "Subscription attach result for $i tries: $ret"
  return $ret
}

function _rhel_repos() {
  local image_file=$1
  local common_repos=$(rhel_get_repos_for_os)
  local enable_repos_opts=''
  for i in $common_repos ; do
    enable_repos_opts+=" --enable=${i}"
  done
  local ret=1
  local i=0
  while (( i < 5 )) ; do
    echo "Enable yum repos try=$i"
    virt-customize -a $image_file \
      --run-command "subscription-manager repos ${enable_repos_opts}" && ret=0
    if (( ret == 0 )) ; then
      break
    fi
    (( i+=1 ))
  done
  echo "Enable yum repos result for $i tries: $ret"
  return $ret
}

function rhel_register_system_and_customize() {
  local image_file=$1
  local image_type=$2
  # todo: fix shopt
  #local old_opt=$(shopt -o xtrace)
  set +x
  . $RHEL_ACCOUNT_FILE
  _rhel_register $image_file
  _rhel_attach $image_file
  #eval "$old_opt"
  set -x
  _rhel_repos $image_file

  virt-customize -a $image_file \
    --run-command 'xfs_growfs /' \
    --run-command 'systemctl enable sshd' \
    --run-command 'sed -i "s/PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config' \
    --root-password password:qwe123QWE \
    --selinux-relabel
      # --run-command 'sed -i "s/SELINUX=.*/SELINUX=disabled/g" /etc/selinux/config'

  if [[ "$image_type" == 'undercloud' ]] ; then

    virt-customize -a $image_file \
      --run-command 'yum remove -y cloud-init'
  fi
}

function rhel_unregister_system() {
  local image_file=$1
  if [[ -f $image_file ]] ; then
    virt-customize -a $image_file \
      --run-command "subscription-manager unregister"
  fi
}
